package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	"log"
	"strconv"

	"github.com/tsbolty/GophersPlayground/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	userID, err := strconv.ParseUint(input.UserID, 10, 64)

	// On 32-bit systems, check for overflow
	if uint64(uint(userID)) != userID {
		// Handle the overflow, for example, return a GraphQL error
		return nil, fmt.Errorf("userID is too large for this platform")
	}

	todo, err := r.ComplexService.CreateTodoForUser(input.Text, uint(userID))

	if err != nil {
		return nil, err
	}

	graphqlTodo := &model.Todo{
		ID:     fmt.Sprintf("%d", todo.ID),
		Text:   todo.Text,
		Done:   todo.Done,
		UserID: int(todo.UserID),
	}

	return graphqlTodo, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	log.Println("IN RESOLVER")

	dbUser, err := r.UserService.CreateUser(input.Email, input.Name)
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:    fmt.Sprintf("%d", dbUser.ID),
		Name:  dbUser.Name,
		Email: dbUser.Email,
	}, nil
}

// FindAllUsers is the resolver for the findAllUsers field.
func (r *queryResolver) FindAllUsers(ctx context.Context) ([]*model.User, error) {
	dbUsers, err := r.UserService.FindAllUsers()
	if err != nil {
		return nil, err
	}

	graphqlUsers := make([]*model.User, len(dbUsers))

	for i, user := range dbUsers {
		graphqlUsers[i] = &model.User{
			ID:    fmt.Sprintf("%d", user.ID),
			Name:  user.Name,
			Email: user.Email,
		}
	}

	return graphqlUsers, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos, err := r.TodoService.GetAllTodos()

	if err != nil {
		return nil, err
	}

	graphqlTodos := make([]*model.Todo, len(todos))

	for i, todo := range todos {
		graphqlTodos[i] = &model.Todo{
			ID:     fmt.Sprintf("%d", todo.ID),
			Text:   todo.Text,
			Done:   todo.Done,
			UserID: int(todo.UserID),
		}
	}

	return graphqlTodos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
